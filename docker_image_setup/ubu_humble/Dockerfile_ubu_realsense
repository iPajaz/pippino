ARG BASE_IMAGE
ARG BASE_IMAGE_NOROS
#################################
#   Librealsense Builder Stage  #
#################################
FROM $BASE_IMAGE_NOROS as librealsense-builder
ARG LIBRS_VERSION
# Make sure that we have a version number of librealsense as argument
RUN test -n "$LIBRS_VERSION"

# To avoid waiting for input during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Builder dependencies installation
RUN apt-get update \
    && apt-get install -qq -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    libssl-dev \
    libusb-1.0-0-dev \
    pkg-config \
    libgtk-3-dev \
    libglfw3-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    curl \
    python3 \
    python3-dev \
    ca-certificates \
    software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# RUN add-apt-repository ppa:deadsnakes/ppa && apt update
# RUN apt install -y python3.9 python3.9-dev

# Download sources
WORKDIR /usr/src
RUN curl https://codeload.github.com/IntelRealSense/librealsense/tar.gz/refs/tags/v$LIBRS_VERSION -o librealsense.tar.gz
RUN tar -zxf librealsense.tar.gz \
    && rm librealsense.tar.gz
# COPY librealsense-$LIBRS_VERSION /usr/src/librealsense-$LIBRS_VERSION
RUN ln -s /usr/src/librealsense-$LIBRS_VERSION /usr/src/librealsense

ENV CUDACXX="/usr/local/cuda/bin/nvcc"
RUN apt update && apt install -y gcc-8 g++-8

RUN rm -f /usr/bin/gcc && ln -s "/usr/bin/gcc-8" "/usr/bin/gcc"
RUN rm -f /usr/bin/cpp && ln -s "/usr/bin/cpp-8" "/usr/bin/cpp"

# Build and install
RUN cd /usr/src/librealsense \
    && mkdir build && cd build \
    && cmake \
    -DCMAscevoKE_C_FLAGS_RELEASE="${CMAKE_C_FLAGS_RELEASE} -s" \
    -DCMAKE_CXX_FLAGS_RELEASE="${CMAKE_CXX_FLAGS_RELEASE} -s" \
    -DCMAKE_INSTALL_PREFIX=/opt/librealsense \
    -DBUILD_GRAPHICAL_EXAMPLES=OFF \
    -DBUILD_PYTHON_BINDINGS:bool=true \
    -DCMAKE_BUILD_TYPE=Release ../ \
    -DBUILD_WITH_CUDA=true \
    -DPYTHON_EXECUTABLE=/usr/bin/python3.8 \
    -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda \
    && make -j$(($(nproc)-1)) all \
    && make install

    # -DBUILD_WITH_OPENMP=true \

######################################
#   librealsense Base Image Stage    #
######################################
FROM $BASE_IMAGE as librealsense


ARG RS_WRAPPER_TAG
ARG CAM_TYPE
RUN test -n "$RS_WRAPPER_TAG"

# Copy binaries from builder stage
COPY --from=librealsense-builder /opt/librealsense /usr/local/
# COPY --from=librealsense-builder /usr/lib/python3/dist-packages/pyrealsense2 /usr/lib/python3/dist-packages/pyrealsense2
COPY --from=librealsense-builder /usr/src/librealsense/config/99-realsense-libusb.rules /etc/udev/rules.d/
ENV PYTHONPATH=$PYTHONPATH:/usr/local/lib

RUN apt-get update && apt-get -y upgrade

RUN apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    libusb-1.0-0 \
    udev \
    apt-transport-https \
    ca-certificates \
    curl \
    git \
    clang-tidy \
    flex \
    bison \
    usbutils \
    software-properties-common \
    libboost-all-dev

ARG UID
ARG GID

RUN mkdir /home/michele

RUN groupadd --gid $GID michele
RUN useradd -d /home/michele --uid $UID --gid $GID michele
RUN echo 'michele:michele' | chpasswd

RUN chown michele:michele /home/michele

USER michele

RUN mkdir -p /home/michele/realsense_ws/src

ARG ROS_DISTRO
WORKDIR /home/michele/realsense_ws
SHELL ["/bin/bash", "-c"]

RUN git clone https://github.com/ros/diagnostics.git -b ros2 --depth 1

RUN if [[ -z "$CAM_TYPE" ]] ; then \
        echo Selecting T265 ROS wrapper. ; \
        git clone https://github.com/iPajaz/realsense-ros.git -b t265-fix-odom-in --depth 1 ; \
    elif [[ "$CAM_TYPE" == "d455" ]]; then \
        echo Selecting ROS wrapper version $RS_WRAPPER_TAG ; \
        git clone https://github.com/IntelRealSense/realsense-ros.git -b $RS_WRAPPER_TAG --depth 1 ; \ 
    else \
        echo No ROS wrapper selected. ; \
        exit -1 ; \
    fi

RUN source /opt/ros/$ROS_DISTRO/install/setup.bash \
    && colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda  -DPython3_EXECUTABLE=/usr/bin/python3.8

RUN echo 'source /home/michele/pippino_ws/install/local_setup.bash' >> /home/michele/.bashrc
RUN echo 'source /home/michele/realsense_ws/install/local_setup.bash' >> /home/michele/.bashrc

ARG ENTRYPOINT_SCRIPT

RUN echo "alias run='/home/michele/pippino_ws/src/$ENTRYPOINT_SCRIPT'" >> /home/michele/.bashrc

USER root
RUN usermod -aG sudo michele
RUN usermod -aG video michele
RUN usermod -aG dialout michele
USER michele

RUN mkdir -p /home/michele/pippino_ws/src

WORKDIR /home/michele/pippino_ws/src/

ENTRYPOINT ["/home/michele/pippino_ws/src/$ENTRYPOINT_SCRIPT"]


