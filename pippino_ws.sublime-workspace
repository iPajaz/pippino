{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"local",
				"local_parameters"
			],
			[
				"calbac",
				"ReentrantCallbackGroup"
			],
			[
				"Follo",
				"FollowPathRPP"
			],
			[
				"profi",
				"d455_fast_profile"
			],
			[
				"hir",
				"d455_hires_profile"
			],
			[
				"laun",
				"launch_arguments"
			],
			[
				"pip",
				"pippino_actuators_cli"
			],
			[
				"reque",
				"request_type"
			],
			[
				"setd",
				"set_d455_color_camera_on"
			],
			[
				"MQ",
				"MQTT_AUTH"
			],
			[
				"pi",
				"pippino_commander"
			],
			[
				"pipp",
				"pippino_commander_node"
			],
			[
				"tcli",
				"t265_param_cli"
			],
			[
				"t",
				"t265_req_future"
			],
			[
				"ROS",
				"ROS_DISTRO"
			],
			[
				"pico",
				"PippinoCommander"
			],
			[
				"ROSD",
				"ROS_DISTRO"
			],
			[
				"vido",
				"video_stream_controller"
			],
			[
				"un",
				"undistorted_image"
			],
			[
				"compreimag",
				"CompressedImage"
			],
			[
				"aruco",
				"aruco_detection_node"
			],
			[
				"charsta",
				"charging_station"
			],
			[
				"ya",
				"yaw_to_position"
			],
			[
				"charposiro",
				"CHARGING_POSITION_REACHED"
			],
			[
				"charpo",
				"CHARGING_POSITION_REACHED"
			],
			[
				"T2",
				"T265_link"
			],
			[
				"msg",
				"aruco_marker_visible_msg"
			],
			[
				"yat",
				"yaw_to_location"
			],
			[
				"chaposre",
				"charging_position_reached"
			],
			[
				"final",
				"final_yaw_correction"
			],
			[
				"chargin_",
				"charging_position_rough_reached"
			],
			[
				"cm",
				"camera_link"
			],
			[
				"delt",
				"delta_x"
			],
			[
				"eul",
				"euler2quat"
			],
			[
				"conne",
				"connect_to_dock"
			],
			[
				"l",
				"L4T_VERSION"
			],
			[
				"BASE",
				"BASE_IMAGE"
			],
			[
				"Ba",
				"BASE_IMAGE"
			],
			[
				"robodesc",
				"robot_desc"
			],
			[
				"tpi",
				"topic"
			],
			[
				"i",
				"distro"
			],
			[
				"camede",
				"camera_depth_optical_frame"
			],
			[
				"pkggazebo",
				"pkg_dolly_gazebo"
			],
			[
				"lau",
				"launch"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#!/usr/bin/env python3\n\n# (c) Michele De Marchi 2023\n\nimport rclpy  # Python library for ROS 2\nfrom rclpy.node import Node  # Handles the creation of nodes\nfrom cv_bridge import CvBridge  # Package to convert between ROS and OpenCV Images\nfrom sensor_msgs.msg import Image, CompressedImage, Joy, CameraInfo  # Image is the message type\nfrom std_msgs.msg import Int32\nfrom rclpy.parameter import Parameter\nfrom rcl_interfaces.srv import SetParameters\nfrom pippino_service_msg.srv import PippinoVideoStream, PippinoActuators\nfrom std_msgs.msg import String\nfrom rclpy.callback_groups import ReentrantCallbackGroup\nfrom rclpy.executors import MultiThreadedExecutor\n\n# Import Python libraries\nimport cv2  # OpenCV library\nimport ast\nimport numpy as np  # Import Numpy library\nimport time\nfrom threading import Event\n\nclass VideoStreamControllerConfig():\n    d455_fast_profile = '640x360x30'\n    # d455_hires_profile = '1280x800x5'\n    d455_hires_profile = '848x480x30'\n\n\nclass CustomLogger:\n    def __init__(self, node, name):\n        self.node = node\n        self.logging_pub = node.create_publisher(String, 'pippino_ui_log', 1)\n        self.logging_msg = String()\n        self.logger = node.get_logger()\n        self.name = name\n        def get_logger():\n            return self\n\n        self.node.get_logger = get_logger\n\n    def info(self, msg: str):\n        self.logger.info(msg)\n        self.logging_msg.data = f'{self.name}: {msg}'\n        self.logging_pub.publish(self.logging_msg)\n\n    def warning(self, msg: str):\n        self.logger.warning(msg)\n        self.logging_msg.data = f'{self.name} W: {msg}'\n        self.logging_pub.publish(self.logging_msg)\n\n    def error(self, msg: str):\n        self.logger.error(msg)\n        self.logging_msg.data = f'{self.name} E: {msg}'\n        self.logging_pub.publish(self.logging_msg)\n\n\n\nclass VideoStreamController(Node):\n    \"\"\"\n    Create an ArucoDetection class, which is a subclass of the Node class.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Class constructor to set up the node\n        \"\"\"\n        # Initiate the Node class's constructor and give it a name\n        super().__init__('video_stream_controller')\n\n        self.cfg = VideoStreamControllerConfig()\n\n        CustomLogger(self, 'Video Stream Ctrl')\n\n        self.declare_parameter(\"color_image_topic\", \"/D455/color/image_raw\")\n        self.declare_parameter(\"fisheye_image_topic\", \"/T265/fisheye1/image_raw\")\n        self.declare_parameter(\"camera_calibration_parameters_filename\", \"/pippino_ws/src/video_stream_controller/config/calibration_T265_fisheye1.yaml\")\n\n        self._curr_color_profile = None\n        # Read parameters\n        self.camera_calibration_parameters_filename = self.get_parameter(\n                \"camera_calibration_parameters_filename\").get_parameter_value().string_value\n        self.fisheye_image_topic = self.get_parameter(\"fisheye_image_topic\").get_parameter_value().string_value\n        self.color_image_topic = self.get_parameter(\"color_image_topic\").get_parameter_value().string_value\n\n        # Load the camera parameters from the saved file\n        cv_file = cv2.FileStorage(\n                self.camera_calibration_parameters_filename, cv2.FILE_STORAGE_READ)\n        self.mtx = cv_file.getNode('K').mat()\n        self.dst = cv_file.getNode('D').mat()\n        print(self.mtx, self.dst)\n        cv_file.release()\n\n        # Used to convert between ROS and OpenCV images\n        self.bridge = CvBridge()\n\n        d455_param_cb_group = ReentrantCallbackGroup()\n        t265_param_cb_group = ReentrantCallbackGroup()\n        \n        self.d455_set_param_req = SetParameters.Request()\n        self.d455_param_cli = self.create_client(SetParameters, '/D455/D455/set_parameters', callback_group=d455_param_cb_group)\n\n\n        self.t265_set_param_req = SetParameters.Request()\n        self.t265_param_cli = self.create_client(SetParameters, '/T265/T265/set_parameters', callback_group=t265_param_cb_group)\n\n        # self.set_d455_color_camera_state(False)\n        # self.set_t265_fisheye_camera_state(False)\n\n        # self.joy_subscription = self.create_subscription(\n        #     Joy, \n        #     '/joy', \n        #     self.joy_message_callback, \n        #     3)\n\n        pub_sub_cb_group = ReentrantCallbackGroup()\n\n        # self.compressed_image_msg = Image()\n        # self.image_msg = Image()\n        self.image_publisher = self.create_publisher(\n            CompressedImage,\n            '/strctl/image_raw/compressed',\n            1,\n            callback_group=pub_sub_cb_group\n        )\n\n        # self.base_image_publisher = self.create_publisher(\n        #     Image,\n        #     '/strctl/image_raw',\n        #     1\n        # )\n\n        self.cam_info_publisher = self.create_publisher(\n            CameraInfo,\n            '/strctl/image_raw/camera_info',\n            1,\n            callback_group=pub_sub_cb_group\n        )\n        # self.compressed_image_publisher = self.create_publisher(\n        #     Image,\n        #     '/video',\n        #     5\n        # )\n\n        self.color_subscription = self.create_subscription(\n            Image, \n            self.color_image_topic,\n            self.color_image_callback, \n            1,\n            callback_group=pub_sub_cb_group\n        )\n        \n        self.fisheye_subscription = self.create_subscription(\n            Image, \n            self.fisheye_image_topic,\n            self.fisheye_image_callback, \n            1,\n            callback_group=pub_sub_cb_group\n        )\n\n        self.button_color_cam_counter = 0\n        self.button_fisheye_cam_counter = 0\n        self.color_enabled = False\n        self.fisheye_enabled = False\n\n\n        # self.pippino_actuators_cli = self.create_client(PippinoActuators, '/pippino_actuators')\n        # while not self.pippino_actuators_cli.wait_for_service(timeout_sec=1.0):\n        #     self.get_logger().info('service not available.')\n        video_stream_service_cb_group = ReentrantCallbackGroup()\n\n        self.video_stream_service = self.create_service(PippinoVideoStream, 'pippino_video_stream', self.service_callback, callback_group=video_stream_service_cb_group)\n        self.get_logger().info('Pippino video stream controller service up and running.')\n        # self.actuators_relay_service = self.create_service(PippinoActuators, 'pippino_actuators_relay', self.pippino_actuators_relay_cb)\n\n\n        self._loop_rate = self.create_rate(1)  # 1 Hz\n\n\n    def call_service(self, request, client, timeout, timeout_wait_for_service=10.0):\n        if not client.wait_for_service(timeout_sec=timeout_wait_for_service):\n            self.get_logger().error('Service not available.')\n        self.get_logger().info('Service available.')\n        future = client.call_async(request)\n        event = Event()\n        future.add_done_callback(lambda f, e=event: self.service_done_callback(f, e))\n        event.wait(timeout=timeout)\n        return future.result()\n\n    def service_done_callback(self, future, event):\n        event.set()\n        event.clear()   # seems to work when immediately cleared, for reuse\n\n    def set_t265_fisheye_camera_state(self, enabled):\n        if self.fisheye_enabled != enabled:\n            self.t265_set_param_req.parameters = [Parameter(name='enable_fisheye1', value=enabled).to_parameter_msg(), Parameter(name='enable_fisheye2', value=enabled).to_parameter_msg()]\n            # if not self.t265_param_cli.wait_for_service(timeout_sec=10.0):\n            #     self.get_logger().info('T265 service not available.')\n            #     return False\n\n            # t265_set_param_future = self.t265_param_cli.call_async(self.t265_set_param_req)\n            # self.executor.spin_until_future_complete(t265_set_param_future, timeout_sec=10.0)\n\n            result = self.call_service(self.t265_set_param_req, self.t265_param_cli, 10.0)\n\n            if result is None or not result.results[0].successful:\n                return False\n            self.fisheye_enabled = enabled\n\n        return True\n\n    def set_d455_color_camera_state(self, enabled, profile=None):\n        if profile is not None and self._curr_color_profile != profile:\n            # set profile and disable color\n            self.get_logger().info(f\"Trying to set color camera profile...\")\n            # if not self.d455_param_cli.wait_for_service(timeout_sec=10.0):\n            #     self.get_logger().info('D455 service not available.')\n            #     return False\n\n            self.d455_set_param_req.parameters = [Parameter(name='enable_color', value=False).to_parameter_msg(), Parameter(name='rgb_camera.profile', value=profile).to_parameter_msg()]\n            # d455_set_param_future = self.d455_param_cli.call_async(self.d455_set_param_req)\n\n            # self.executor.spin_until_future_complete(d455_set_param_future, timeout_sec=10.0)\n            result = self.call_service(self.d455_set_param_req, self.d455_param_cli, 10.0)\n\n            if result is None or not result.results[0].successful:\n                return False\n\n            self._curr_color_profile = profile\n            self.color_enabled = False\n\n            if enabled:\n                # d455_set_param_future.add_done_callback(self.set_d455_color_camera_on)\n                # self.set_d455_color_camera_on()\n                self.get_logger().info(f\"Trying to {'enable' if enabled else 'disable'} color camera...\")\n                self.d455_set_param_req.parameters = [Parameter(name='enable_color', value=True).to_parameter_msg()]\n                # d455_set_param_future = self.d455_param_cli.call_async(self.d455_set_param_req)\n                self._loop_rate.sleep()\n                self._loop_rate.sleep()\n                # self.executor.spin_until_future_complete(d455_set_param_future, timeout_sec=10.0)\n                result = self.call_service(self.d455_set_param_req, self.d455_param_cli, 10.0)\n    \n                if result is None or not result.results[0].successful:\n                    return False\n\n                self.color_enabled = True\n\n\n        elif self.color_enabled != enabled:\n            self.get_logger().info(f\"Trying to {'enable' if enabled else 'disable'} color camera...\")\n            # if not self.d455_param_cli.wait_for_service(timeout_sec=10.0):\n            #     self.get_logger().info('D455 service not available.')\n            #     return False\n            self.d455_set_param_req.parameters = [Parameter(name='enable_color', value=enabled).to_parameter_msg()]\n            self._loop_rate.sleep()\n\n            # d455_set_param_future = self.d455_param_cli.call_async(self.d455_set_param_req)\n\n            # self.executor.spin_until_future_complete(d455_set_param_future, timeout_sec=10.0)\n            result = self.call_service(self.d455_set_param_req, self.d455_param_cli, 10.0)\n            \n            if result is None or not result.results[0].successful:\n                return False\n\n            self.color_enabled = enabled\n        # breakpoint()\n        return True\n\n    def color_image_callback(self, data):\n        # print(\"publishing\")\n        # breakpoint()\n        current_frame = self.bridge.imgmsg_to_cv2(data, desired_encoding=\"bgr8\")\n        compressed_image_msg = self.bridge.cv2_to_compressed_imgmsg(current_frame)\n        # self.compressed_image_msg.data = compressed_img\n        # self.image_msg = data\n        # self.get_logger().info(\"publishing\")\n        compressed_image_msg.header = data.header\n        compressed_image_msg.format = \"rgb8; jpeg compressed rgb8\"\n        self.image_publisher.publish(compressed_image_msg)\n\n        # msg = CameraInfo()\n        # msg.header = data.header\n        # msg.height = 800\n        # msg.width = 1280\n        # compressed_image_msg.format = \"bgr8; jpeg compressed rgb8\"\n\n        # self.cam_info_publisher.publish(msg)\n\n\n    # def color_image_callback(self, data):\n    #     self.image_publisher.publish(data)\n        \n        # msg = Image()\n        # msg.height=800\n        # msg.width=1280\n        # msg.encoding=\"rgb8\"\n        # msg.step=3840\n        # msg.header = data.header\n        # msg.data = [0] * (800 *3840)\n        # self.base_image_publisher.publish(msg)\n\n\n    def fisheye_image_callback(self, data):\n        current_frame = self.bridge.imgmsg_to_cv2(data, desired_encoding=\"mono8\")\n        undistorted_image = cv2.fisheye.undistortImage(current_frame, self.mtx, self.dst, Knew=self.mtx, new_size=(1000, 1000))\n\n        # map_1, map_2 = cv2.fisheye.initUndistortRectifyMap(self.mtx, self.dst, np.eye(3), self.mtx, (1000, 1000), cv2.CV_32F)\n        # undistorted_image = cv2.remap(current_frame, map_1, map_2, interpolation=cv2.INTER_LINEAR, borderMode=cv2.BORDER_CONSTANT)\n\n        compressed_image_msg = self.bridge.cv2_to_compressed_imgmsg(undistorted_image)\n        compressed_image_msg.header = data.header\n        compressed_image_msg.format = \"mono8; jpeg compressed mono8\"\n\n        self.image_publisher.publish(compressed_image_msg)\n\n        # image_msg = self.bridge.cv2_to_imgmsg(undistorted_image, encoding='mono8')\n        # self.image_publisher.publish(image_msg)\n    \n    # def pippino_actuators_relay_cb(self, request, response):\n    #     self.get_logger().warning(\"trying to set vacuum\")\n    #     self.req = PippinoActuators.Request()\n    #     self.req.request_type = 1\n    #     self.req.bool_vacuum_enable = True        \n    #     self.pippino_actuators_cli.call_async(self.req)\n    #     response.success = True\n    #     return response\n\n    def get_d455_rgb_profile(self, hires):\n            if hires:\n                return self.cfg.d455_hires_profile\n            else:\n                return self.cfg.d455_fast_profile\n\n    def service_callback(self, request, response):\n        # self.get_logger().info(f\"setting cameras {request.request_type}\")\n        if request.request_type == 0:\n            if self.set_d455_color_camera_state(request.d455_enable):\n                self.get_logger().info(f\"Color camera {'enabled' if request.d455_enable else 'disabled'}.\")\n            else:\n                response.success = False\n                self.get_logger().error(\"Failed to set camera params.\")\n                return response\n        elif request.request_type == 1:\n            if self.set_d455_color_camera_state(request.d455_enable, self.get_d455_rgb_profile(request.d455_hires)):\n                self.get_logger().info(f\"Color camera {'enabled' if request.d455_enable else 'disabled'}.\")\n            else:\n                response.success = False\n                self.get_logger().error(\"Failed to set camera params.\")\n                return response\n        elif request.request_type == 2:\n            if self.set_t265_fisheye_camera_state(request.t265_enable):\n                self.get_logger().info(f\"Fisheye camera {'enabled' if request.t265_enable else 'disabled'}.\")\n            else:\n                response.success = False\n                self.get_logger().error(\"Failed to set camera params.\")\n                return response\n        elif request.request_type == 3:\n            if self.set_d455_color_camera_state(request.d455_enable):\n                self.get_logger().info(f\"Color camera {'enabled' if request.d455_enable else 'disabled'}.\")\n            else:\n                response.success = False\n                self.get_logger().error(\"Failed to set camera params.\")\n                return response\n            if self.set_t265_fisheye_camera_state(request.t265_enable):\n                self.get_logger().info(f\"Fisheye camera {'enabled' if request.t265_enable else 'disabled'}.\")\n            else:\n                response.success = False\n                self.get_logger().error(\"Failed to set camera params.\")\n                return response\n        elif request.request_type == 4:\n            if self.set_d455_color_camera_state(request.d455_enable, self.get_d455_rgb_profile(request.d455_hires)):\n                self.get_logger().info(f\"Color camera {'enabled' if request.d455_enable else 'disabled'}.\")\n            else:\n                response.success = False\n                self.get_logger().error(\"Failed to set camera params.\")\n                return response\n            self.set_t265_fisheye_camera_state(request.t265_enable)\n\n        response.success=True\n        return response\n\n\n        # # self.get_logger().warning(f\"Fubar {data}\")\n        # if data.buttons[0] == 1:\n        # #     self.button_color_cam_counter += 1\n        # #     self.button_fisheye_cam_counter = 0\n        # #     print(self.button_color_cam_counter)\n        # # elif data.buttons[1] == 1:\n        # #     self.button_color_cam_counter = 0\n        # #     self.button_fisheye_cam_counter += 1\n        # #     print(self.button_fisheye_cam_counter)\n        # # if self.button_color_cam_counter == 20:\n        #     self.set_t265_fisheye_camera_state(False)\n        #     self.set_d455_color_camera_state(True, profile=self.cfg.d455_fast_profile)\n        #     # self.button_color_cam_counter = 0\n        #     self.color_enabled = True\n        #     self.fisheye_enabled = False\n        # elif data.buttons[1] == 1:\n        # # elif self.button_fisheye_cam_counter == 20:\n        #     self.set_t265_fisheye_camera_state(True)\n        #     self.set_d455_color_camera_state(False)\n        #     # self.button_fisheye_cam_counter = 0\n        #     self.fisheye_enabled = True\n        #     self.color_enabled = False\n        # elif data.buttons[2] == 1:\n        #     self.set_t265_fisheye_camera_state(False)\n        #     self.set_d455_color_camera_state(False)\n        # elif len(data.buttons) > 8 and data.buttons[8] == 1:\n        #     self.set_t265_fisheye_camera_state(False)\n        #     self.set_d455_color_camera_state(True, profile=self.cfg.d455_hires_profile)\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n\n    video_stream_controller = VideoStreamController()\n    executor = MultiThreadedExecutor()\n    rclpy.spin(video_stream_controller, executor=executor)\n\n    rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()\n",
			"file": "/home/michele/remote/pippino2/pippino_ws/src/video_stream_controller/video_stream_controller/video_stream_controller.py",
			"file_size": 17924,
			"file_write_time": 133455090381151217,
			"settings":
			{
				"buffer_size": 17924,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"duplicate_line",
					null,
					"AQAAAJ0DAAAAAAAAwwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAMAAAAAAACYAwAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAHsDAAAAAAAAfQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAMAAAAAAACYAwAAAAAAAAAAAAAAwHhA"
				],
				[
					10,
					8,
					"left_delete",
					null,
					"CAAAAMADAAAAAAAAwAMAAAAAAAABAAAAML8DAAAAAAAAvwMAAAAAAAABAAAAML4DAAAAAAAAvgMAAAAAAAABAAAAOL0DAAAAAAAAvQMAAAAAAAABAAAAeLwDAAAAAAAAvAMAAAAAAAABAAAAMLsDAAAAAAAAuwMAAAAAAAABAAAAOLoDAAAAAAAAugMAAAAAAAABAAAAMrkDAAAAAAAAuQMAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAwQMAAAAAAADBAwAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "6"
					},
					"AQAAALkDAAAAAAAAugMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQMAAAAAAAC5AwAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAALkDAAAAAAAAuQMAAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAAugMAAAAAAAC6AwAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "84"
					},
					"AgAAALkDAAAAAAAAugMAAAAAAAAAAAAAugMAAAAAAAC7AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQMAAAAAAAC5AwAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "8x480"
					},
					"BQAAALsDAAAAAAAAvAMAAAAAAAAAAAAAvAMAAAAAAAC9AwAAAAAAAAAAAAC9AwAAAAAAAL4DAAAAAAAAAAAAAL4DAAAAAAAAvwMAAAAAAAAAAAAAvwMAAAAAAADAAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwMAAAAAAAC7AwAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"right_delete",
					null,
					"AQAAAMEDAAAAAAAAwQMAAAAAAAABAAAANQ",
					"AQAAAAAAAAABAAAAwQMAAAAAAADBAwAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "30"
					},
					"AgAAAMEDAAAAAAAAwgMAAAAAAAAAAAAAwgMAAAAAAADDAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQMAAAAAAADBAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/michele/remote/pippino2/pippino_ws/src/d455.yaml",
			"settings":
			{
				"buffer_size": 1610,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAAOYBAAAAAAAA5gEAAAAAAAABAAAANQ",
					"AQAAAAAAAAABAAAA5wEAAAAAAADnAQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "30"
					},
					"AgAAAOYBAAAAAAAA5wEAAAAAAAAAAAAA5wEAAAAAAADoAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5gEAAAAAAADmAQAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"bash",
				"Set Syntax: Bash"
			],
			[
				"docker",
				"Set Syntax: Dockerfile"
			],
			[
				"dock",
				"Set Syntax: Dockerfile"
			],
			[
				"wr",
				"Word Wrap: Toggle"
			],
			[
				"wrap",
				"Word Wrap: Toggle"
			],
			[
				"wra",
				"Word Wrap: Toggle"
			],
			[
				"xm",
				"Set Syntax: XML"
			],
			[
				"pyt",
				"Set Syntax: Python"
			],
			[
				"yam",
				"Set Syntax: YAML"
			],
			[
				"py",
				"Set Syntax: Python"
			],
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"SYNTPY",
				"Set Syntax: Python"
			],
			[
				"SYNDOCK",
				"Set Syntax: Dockerfile"
			],
			[
				"pytho",
				"Set Syntax: Python"
			],
			[
				"veri",
				"Set Syntax: Verilog"
			],
			[
				"bas",
				"Set Syntax: Bash"
			],
			[
				"syntpy",
				"Set Syntax: Python"
			],
			[
				"makef",
				"Set Syntax: Makefile"
			],
			[
				"yaml",
				"Set Syntax: YAML"
			],
			[
				"install p",
				"Package Control: Install Package"
			],
			[
				"xml",
				"Set Syntax: XML"
			],
			[
				"syntax makef",
				"Set Syntax: Makefile"
			],
			[
				"syntxm",
				"Set Syntax: XML"
			],
			[
				"wor",
				"Word Wrap: Toggle"
			],
			[
				"syntmake",
				"Set Syntax: Makefile"
			],
			[
				"theme",
				"UI: Select Theme"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/michele/pippino_ws/src",
		"/home/michele/pippino_ws/src/pippino_bringup",
		"/home/michele/pippino_ws/src/pippino_bringup/launch",
		"/home/michele/remote/pippino2/pippino_ws/src",
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup",
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup/ubu_humble",
		"/home/michele/remote/pippino2/pippino_ws/src/pippino_bringup",
		"/home/michele/remote/pippino2/pippino_ws/src/pippino_bringup/launch",
		"/home/michele/remote/pippino2/pippino_ws/src/pippino_bringup/odom_calib",
		"/home/michele/remote/pippino2/pippino_ws/src/video_stream_controller",
		"/home/michele/remote/pippino2/pippino_ws/src/video_stream_controller/config",
		"/home/michele/remote/pippino2/pippino_ws/src/video_stream_controller/resource",
		"/home/michele/remote/pippino2/pippino_ws/src/video_stream_controller/video_stream_controller",
		"/home/michele/remote/pippino2/deep_learning_ws/src"
	],
	"file_history":
	[
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup/run_daemon_realsense_separate.sh",
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup/run_daemon_realsense.sh",
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup/run_daemon_realsense_d455.sh",
		"/home/michele/remote/pippino2/pippino_ws/src/pippino-realsense_t265-entrypoint.sh",
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup/run_daemon_realsense_t265.sh",
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup/run_interactive_realsense.sh",
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup/run_interactive_realsense_d455.sh",
		"/home/michele/pippino_ws/src/pippino_description/launch/description.launch.py",
		"/home/michele/pippino_ws/src/pippino_bringup/launch/bringup.launch.py",
		"/home/michele/remote/pippino2/pippino_ws/src/pippino_description/launch/description.launch.py",
		"/home/michele/remote/pippino2/pippino_ws/src/video_stream_controller/video_stream_controller/video_stream_controller.py",
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup/run_daemons.sh",
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup/ubu_humble/Dockerfile_ubu_realsense",
		"/home/michele/remote/pippino2/pippino_ws/src/d455.yaml",
		"/home/michele/remote/pippino2/pippino_ws/src/d455_extrinsics.txt",
		"/home/michele/remote/pippino2/pippino_ws/src/pippino_bringup/launch/rs_launch.py",
		"/home/michele/remote/pippino2/pippino_ws/src/pippino_bringup/launch/rs_multi_camera_launch.py",
		"/home/michele/remote/pippino2/pippino_ws/src/pippino_bringup/launch/rs_t265_launch.py",
		"/home/michele/remote/pippino2/pippino_ws/src/pippino-realsense_d455-entrypoint.sh",
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup/ubu_humble/build_ubu_realsense_d455.sh",
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup/ubu_humble/build_ubu_realsense.sh",
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup/run_daemon_services.sh",
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup/run_interactive_services.sh",
		"/home/michele/remote/pippino2/pippino_ws/src/docker_image_setup/test_rtps_rs.sh",
		"/home/michele/pippino_ws/src/pippino_navigation/launch/bringup.launch.py",
		"/home/michele/remote/pippino/pippino_ws/src/docker_image_setup/ubu_humble/Dockerfile_ubu_realsense",
		"/home/michele/.bashrc",
		"/home/michele/pippino_ws/src/pippino_ws.sublime-project",
		"/home/michele/remote/pippino/pippino_ws/src/docker_image_setup/ubu_humble/build_ubu_realsense.sh",
		"/home/michele/remote/pippino/pippino_ws/src/docker_image_setup/ubu_humble/Dockerfile_ubu_base",
		"/home/michele/remote/pippino/pippino_ws/src/docker_image_setup/ubu_humble/build_ubu_base.sh",
		"/home/michele/remote/pippino/pippino_ws/src/video_stream_controller/video_stream_controller/video_stream_controller.py",
		"/home/michele/pippino_ws/src/pippino_navigation/config/bt_navigate_through_poses_w_replanning_and_recovery.xml",
		"/home/michele/pippino_ws/src/pippino_navigation/config/slam_params.yaml",
		"/home/michele/pippino_ws/src/pippino_navigation/config/nav2_params_humble.yaml",
		"/media/michele/home/michele/.bash_history",
		"/home/michele/.bash_history",
		"/home/michele/pippino_ws/src/pippino_navigation/config/bt_navigate_to_pose.xml",
		"/home/michele/Downloads/chengdu_retest_in_cmk_new_commit_only_non_sram_fails.csv",
		"/home/michele/pippino_ws/src/pippino_navigation/config/default_params.yaml",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_bringup/launch/rs_launch.py",
		"/home/michele/remote/pippino/pippino_ws/src/d455.yaml",
		"/home/michele/start_pippino.sh",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_bringup/launch/rs_multi_camera_launch.py",
		"/home/michele/maps/upper_floor_with_aruco/aruco_markers.yaml",
		"/home/michele/pippino_ws/src/pippino_navigation/config/nav2_params_galactic.yaml",
		"/home/michele/remote/pippino/pippino_ws/src/docker_image_setup/run_daemons.sh",
		"/home/michele/pippino_ws/src/pippino_navigation/launch/navigation.launch.py",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_odom/launch/odom.launch.py",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_odom/src/pippino_odom.cpp",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_description/config/ekf.yaml",
		"/home/michele/ubuntu_configure_script.sh",
		"/home/michele/pippino_ws/src/pippino_description/src/description/pippino.urdf",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_bringup/launch/pippino.launch.py",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_description/src/description/pippino.urdf",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_description/launch/description.launch.py",
		"/media/michele/6321f30b-b360-44c7-8c65-ea3014d29763/home/michele/ubuntu_configure_script.sh",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_bringup/launch/rs_d400_and_t265_launch.py",
		"/home/michele/pippino_ws/src/pippino_navigation/CMakeLists.txt",
		"/home/michele/pippino_ws/src/pippino_navigation/package.xml",
		"/home/michele/remote/pippino/pippino_ws/src/fastrtps_client.xml",
		"/home/michele/remote/pippino/pippino_ws/src/pippino-services-entrypoint_interactive.sh",
		"/home/michele/remote/pippino/pippino_ws/src/pippino-services-entrypoint.sh",
		"/home/michele/remote/pippino/pippino_ws/src/pippino-realsense-entrypoint.sh",
		"/home/michele/remote/pippino/pippino_ws/src/pippino-inference-entrypoint.sh",
		"/home/michele/remote/pippino/pippino_ws/src/test_rtps_entrypoint.sh",
		"/home/michele/remote/pippino/pippino_ws/src/apt-pippino-installed.txt",
		"/home/michele/remote/pippino/pippino_ws/src/docker_image_setup/test_rtps_sv.sh",
		"/home/michele/remote/pippino/pippino_ws/src/docker_image_setup/run_daemon_services.sh",
		"/home/michele/remote/pippino/pippino_ws/src/docker_image_setup/run_daemon_realsense.sh",
		"/home/michele/remote/pippino/pippino_ws/src/docker_image_setup/run_interactive_realsense.sh",
		"/home/michele/remote/pippino/pippino_ws/src/docker_image_setup/run_interactive_services.sh",
		"/home/michele/remote/pippino/pippino_ws/src/docker_image_setup/stop_daemon_services.sh",
		"/home/michele/pippino_ws/src/fastrtps_client.xml",
		"/home/michele/remote/pippino/pippino_ws/src/fastrtps.xml",
		"/home/michele/pippino_ws/src/fastrtps_server.xml",
		"/home/michele/remote/pippino/pippino_ws/client.py",
		"/home/michele/start_fastdds_server.sh",
		"/home/michele/remote/pippino/pippino_ws/relay.py",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_service_msg/srv/PippinoActuators.srv",
		"/home/michele/pippino_ws/src/pippino_service_msg/srv/PippinoActuators.srv",
		"/home/michele/pippino_ws/src/pippino_service_msg/package.xml",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_service_msg/package.xml",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_service_msg/srv/PippinoVideoStream.srv",
		"/home/michele/pippino_ws/src/pippino_service_msg/srv/PippinoVideoStream.srv",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_service_msg/srv/PippinoAutodockActions.srv",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_service_msg/CMakeLists.txt",
		"/home/michele/pippino_ws/src/pippino_service_msg/CMakeLists.txt",
		"/home/michele/pippino_ws/src/pippino_service_msg/srv/PippinoAutodockActions.srv",
		"/home/michele/remote/pippino/pippino_ws/src/video_stream_controller/package.xml",
		"/home/michele/remote/pippino/pippino_ws/src/cyclonedds.xml",
		"/home/michele/pippino_ws/src/cyclonedds.xml",
		"/home/michele/pippino_ws/src/fastrtps.xml",
		"/home/michele/remote/pippino/pippino_ws/src/docker_image_setup/test_rtps_rs.sh",
		"/home/michele/remote/pippino/deep_learning_ws/src/launch/detectnet.ros2.launch",
		"/home/michele/remote/pippino/pippino_ws/src/docker_image_setup/run_interactive_inference.sh",
		"/home/michele/pippino_ws/borg_pippino_sh.txt",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_bringup/odom_calib/t265_position_calib.json",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_description/config/ekf_no_T265.yaml",
		"/home/michele/remote/pippino/pippino_ws/src/docker_image_setup/ubu_humble/Dockerfile_ubu_services",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_bringup/config/joystick.yaml",
		"/home/michele/maps/map3_aruco.yaml",
		"/home/michele/maps/map3.yaml",
		"/home/michele/maps/upper_floor_with_aruco/upper_floor_aruco.txt",
		"/home/michele/navigation_humble_ws/src/slam_toolbox/config/mapper_params_online_sync.yaml",
		"/home/michele/navigation_humble_ws/src/slam_toolbox/config/mapper_params_offline.yaml",
		"/home/michele/navigation_humble_ws/src/slam_toolbox/config/mapper_params_localization.yaml",
		"/home/michele/pippino_ws/src/pippino_navigation/launch/slam.launch.py",
		"/home/michele/navigation_humble_ws/src/slam_toolbox/config/mapper_params_lifelong.yaml",
		"/home/michele/terminator_pippino_cmd.sh",
		"/home/michele/start_pippino_environment.sh",
		"/home/michele/terminator_ros_cmd.sh",
		"/home/michele/start_ros_environment.sh",
		"/home/michele/maps/upper_floor_with_aruco/upper_floor_230518.data",
		"/home/michele/pippino_ws/src/pippino_navigation/config/nav2_params_bak_foxy.yaml",
		"/home/michele/pippino_ws/src/pippino_bringup/scripts/set_param.py",
		"/home/michele/stop_pippino.sh",
		"/home/michele/remote/pippino/pippino_ws/src/pippino_bringup/CMakeLists.txt",
		"/home/michele/pippino_ws/src/pippino_commander/pippino_commander/pippino_commander.py",
		"/home/michele/Downloads/Part 3 (7).ics",
		"/home/michele/pippino_ws/src/pippino_commander_interface/package.xml",
		"/home/michele/pippino_ws/src/pippino_commander_interface/CMakeLists.txt",
		"/home/michele/start_pippino",
		"/home/michele/pippino_ws/src/pippino_bringup/launch/bringup_full.launch.py",
		"/home/michele/pippino_ws/src/pippino_bringup/config/mqtt_settings.yaml",
		"/home/michele/pippino_ws/src/pippino_commander/launch/commander.launch.py",
		"/home/michele/pippino_ws/src/pippino_bringup/launch/mqtt_settings.py",
		"/home/michele/pippino_ws/src/.gitignore"
	],
	"find":
	{
		"height": 48.0
	},
	"find_in_files":
	{
		"height": 343.0,
		"where_history":
		[
			"",
			"/home/michele/pippino_ws/src",
			"/home/michele/remote/pippino/pippino_ws/src",
			"",
			"/home/michele/remote/pippino/pippino_ws/src,<project filters>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"90.27 x 59",
			"90.27 x 64.31",
			"318.06",
			"point_cloud_generator",
			"pointcloud",
			"d455",
			"set_d455_color_camera_state",
			"MultiThreadedExecutor",
			"until_fu",
			"d455_set_param_future",
			"spin_until_future_complete",
			"t265_set_param_future",
			"d455",
			"RS_WRAPPER_TAG",
			"local_parameters",
			"rs_launch",
			"Node",
			"launch_ros.actions",
			"launch_ros",
			"name",
			"set_configurable_parameters",
			"1",
			"camera_name1",
			"1",
			"x30",
			"power_line",
			"declare_log_level_cmd",
			"declare_use_respawn_cmd",
			"MultiThreadedExecutor",
			"String",
			"inflation",
			"MultiThreadedExecutor",
			"get_logger",
			"spin_until_future_complete",
			"1.0",
			"while",
			", waiting again..",
			"d455_set_param_req",
			"rclpy.spin_until_future_compl",
			"rclpy.",
			"rclpy.s",
			"rclpy",
			"ReentrantCallbackGroup",
			"cam_param_cb_group",
			"service_callback",
			"breakpo",
			"beakpoi",
			"service_callback",
			"set_d455_color_camera_state",
			"set_t265_fisheye_camera_state",
			"d455_enable",
			"set_d455_color_camera_state",
			"MultiThreadedExecutor",
			"d455_param_cli",
			"d455_set_param_req",
			"fisheye_image_callback",
			"fisheye_subscription",
			"color_subscription",
			"video_stream_service",
			"_loop_rate",
			"set_d455_color_camera_state",
			"warn",
			"pippino_actuators_cli",
			"pippino_actuators_relay_cb",
			"pippino_actuators_cli",
			"t265_set_param_req",
			"set_param_req",
			"set_param_req1",
			"self.future",
			"self.future ",
			"t265_param_cli",
			"color_enabled",
			"set_d455_color_camera_state",
			"_curr_color_profile",
			"profile",
			"set_d455_color_camera_on",
			"pippino_actuators_relay_cb",
			"response",
			"set_d455_color_camera_on",
			"\n                d455_set_param_future.add_done_callback(self.set_d455_col",
			"self.future",
			"d455_param_cli",
			"rot_step",
			"\"/>\n",
			"\n          ",
			"FollowPathRPP",
			"FollowPath",
			"FollowPathRPP",
			"RPP",
			"FollowPathRPP",
			"controller",
			"FollowPath",
			"start_navigation_with_slam",
			"ollowPa",
			"FollowPath",
			"yaw",
			"short",
			"planner",
			"goal_check",
			"current_goal",
			"toler",
			"controller",
			"planner",
			"TRUE",
			"FALSE",
			"\t",
			"0",
			"7",
			"sim_time",
			"smooth",
			"declare_namespace_cmd",
			"DeclareLaunchArgument",
			"Command",
			"LaunchConfiguration",
			"slam",
			"start_display",
			"IfCondition",
			"use_namespace",
			"declare_use_namespace_cmd",
			"local_parameters",
			"map",
			"start_node_webserver",
			"transient",
			"autodock_action_client_node",
			"ut={'both': 'log'},\n",
			"{'both': 'log'}",
			";",
			"231015"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"foxy"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/michele/remote/pippino2/pippino_ws/src/video_stream_controller/video_stream_controller/video_stream_controller.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17924,
						"regions":
						{
						},
						"selection":
						[
							[
								1463,
								1463
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/michele/remote/pippino2/pippino_ws/src/d455.yaml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1610,
						"regions":
						{
						},
						"selection":
						[
							[
								488,
								488
							]
						],
						"settings":
						{
							"syntax": "Packages/YAML/YAML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 117.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 301.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "pippino_ws.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"odom.c",
				"src/pippino_odom/src/pippino_odom.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 575.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 437.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 375.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
